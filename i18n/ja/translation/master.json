{
  "Master related recipes.": "",
  "Master": "",
  "Purpose": "",
  "The **Master** package provides two primary services to manage different aspects of master-related data and settings:": "",
  "**MasterDataService**: Responsible for managing data within the master.": "",
  "**MasterSettingService**: Responsible for managing the settings of the master.": "",
  "Usage": "",
  "The solution for customizing the behavior of the `MasterModule` is to pass it an options `object` in the static `register()` method. The options object is only contain one property:": "",
  "`enableController`: enable or disable default master controller.": "",
  "MasterSettingService": "",
  "The MasterSettingService interface manages settings at various levels (user, group, tenant, common). It allows retrieving, updating, creating, and deleting settings.": "",
  "`getSetting(dto: GetSettingDto, context: { invokeContext: IInvoke }): Promise<MasterSettingEntity>`": "",
  "Descriptions": "",
  "Retrieves a specific setting based on the provided setting code.": "",
  "Parameters": "",
  "`dto`: GetSettingDto": "",
  "`code`: string": "",
  "`createCommonTenantSetting(dto: CommonSettingDto, context: { invokeContext: IInvoke }): Promise<CommandModel>`": "",
  "Creates a common tenant setting that is shared across the system.": "",
  "`dto`: CommonSettingDto": "",
  "`name`: string": "",
  "`settingValue`: object": "",
  "`createTenantSetting(dto: TenantSettingDto, context: { invokeContext: IInvoke }): Promise<CommandModel>`": "",
  "Creates a tenant-specific setting.": "",
  "`dto`: TenantSettingDto": "",
  "`tenantCode`: string": "",
  "`createGroupSetting(dto: GroupSettingDto, context: { invokeContext: IInvoke }): Promise<CommandModel>`": "",
  "Creates a group-specific setting within a tenant.": "",
  "`groupId`: string": "",
  "`createUserSetting(dto: UserSettingDto, context: { invokeContext: IInvoke }): Promise<CommandModel>`": "",
  "Creates a user-specific setting within a tenant.": "",
  "`userId`: string": "",
  "`updateSetting(params: DetailKey, dto: UpdateSettingDto, context: { invokeContext: IInvoke }): Promise<CommandModel>`": "",
  "Updates an existing setting.": "",
  "`key`: DetailKey": "",
  "`pk`: string": "",
  "`sk`: string": "",
  "`dto`: UpdateSettingDto": "",
  "`deleteSetting(key: DetailKey, context: { invokeContext: IInvoke }): Promise<CommandModel>`": "",
  "Deletes a specific setting based on the provided key.": "",
  "MasterDataService": "",
  "The MasterDataService service provides methods to manage master data and operations. This includes listing, retrieving, creating, updating, and deleting data, as well as checking for the existence of specific codes.": "",
  "`list( searchDto: MasterDataSearchDto): Promise<MasterDataListEntity>`": "",
  "Lists master data based on the provided search criteria.": "",
  "`searchDto`: `MasterDataSearchDto`": "",
  "`tenantCode?`: `string`": "",
  "`settingCode`: `string`": "",
  "`get(key: DetailDto): Promise<MasterDataEntity>`": "",
  "Retrieves specific master data based on the provided key.": "",
  "`key`: `DetailDto`": "",
  "`pk`: `string`": "",
  "`sk`: `string`": "",
  "`create(createDto: CreateMasterDataDto, context: { invokeContext: IInvoke })`": "",
  "Creates new master data.": "",
  "`createDto`:`CreateMasterDataDto`": "",
  "`tenantCode`:`string`": "",
  "`name`: `string`": "",
  "`code`: `string`": "",
  "`attributes`?: `object`": "",
  "`update(key: DetailDto, updateDto: UpdateDataSettingDto, context: { invokeContext: IInvoke })`": "",
  "Updates existing master data.": "",
  "`delete(key: DetailDto, opts: { invokeContext: IInvoke })`": "",
  "Deletes specific master data based on the provided key.": "",
  "`checkExistCode(tenantCode: string, type: string, code: string)`": "",
  "Checks if a specific code exists within the given tenant and type.": "",
  "`type`:`string`": "",
  "`code`:`string`": ""
}