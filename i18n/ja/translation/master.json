{
  "Master": "マスター",
  "The Master Service provides functionality for managing master data and settings in a multi-tenant environment": "マスターサービスは、マルチテナント環境でのマスターデータと設定の管理機能を提供します。",
  "Overview": "概要",
  "The Master Service consists of two main components:": "マスターサービスは2つの主要コンポーネントで構成されています。",
  "Implements hierarchical settings management": "階層的な設定管理を実装",
  "Supports creation of settings at all levels": "すべてのレベルでの設定作成をサポート",
  "Provides update and delete operations for tenant settings": "テナント設定の更新および削除操作を提供",
  "Implements cascading settings retrieval": "階層的な設定取得を実装",
  "Master Data Service": "マスターデータサービス",
  "Implements CRUD operations for master data entities": "マスターデータエンティティのCRUD操作を実装",
  "Provides list and retrieval functionality": "リストおよび取得機能を提供",
  "Includes code validation capabilities": "コード検証機能を含む",
  "Ensures data integrity across tenant boundaries": "テナント間のデータ整合性を確保",
  "Installation": "インストール",
  "Basic Usage": "基本的な使い方",
  "The solution for customizing the behavior of the `MasterModule` is to pass it an options `object` in the static `register()` method. The options object is only contain one property:": "`MasterModule` の動作をカスタマイズするには、静的な `register()` メソッドでオプションの `object` を渡します。オプションオブジェクトには1つのプロパティのみが含まれます:",
  "`enableController`: enable or disable default master controller.": "`enableController`: デフォルトのマスターコントローラーを有効または無効にします。",
  "API Reference": "APIリファレンス",
  "MasterSettingService": "マスター設定サービス",
  "The MasterSettingService interface manages settings at various levels user, group, tenant, common. It allows retrieving, updating, creating, and deleting settings.": "MasterSettingService インターフェースは、ユーザー、グループ、テナント、共通のさまざまなレベルで設定を管理します。設定の取得、更新、作成、削除を可能にします。",
  "`getSetting(dto: GetSettingDto, context: { invokeContext: IInvoke }): Promise<MasterSettingEntity>`": "`getSetting(dto: GetSettingDto, context: { invokeContext: IInvoke }): Promise<MasterSettingEntity>`",
  "Retrieves a specific setting based on the provided setting code.": "指定された設定コードに基づいて特定の設定を取得します。",
  "`createCommonTenantSetting(dto: CommonSettingDto, context: { invokeContext: IInvoke }): Promise<CommandModel>`": "`createCommonTenantSetting(dto: CommonSettingDto, context: { invokeContext: IInvoke }): Promise<CommandModel>`",
  "Creates a common tenant setting that is shared across the system.": "システム全体で共有される共通のテナント設定を作成します。",
  "`createTenantSetting(dto: TenantSettingDto, context: { invokeContext: IInvoke }): Promise<CommandModel>`": "`createTenantSetting(dto: TenantSettingDto, context: { invokeContext: IInvoke }): Promise<CommandModel>`",
  "Creates a tenant-specific setting.": "テナント固有の設定を作成します。",
  "`createGroupSetting(dto: GroupSettingDto, context: { invokeContext: IInvoke }): Promise<CommandModel>`": "`createGroupSetting(dto: GroupSettingDto, context: { invokeContext: IInvoke }): Promise<CommandModel>`",
  "Creates a group-specific setting within a tenant.": "テナント内でグループ固有の設定を作成します。",
  "`createUserSetting(dto: UserSettingDto, context: { invokeContext: IInvoke }): Promise<CommandModel>`": "`createUserSetting(dto: UserSettingDto, context: { invokeContext: IInvoke }): Promise<CommandModel>`",
  "Creates a user-specific setting within a tenant.": "テナント内でユーザー固有の設定を作成します。",
  "`updateSetting(params: DetailKey, dto: UpdateSettingDto, context: { invokeContext: IInvoke }): Promise<CommandModel>`": "`updateSetting(params: DetailKey, dto: UpdateSettingDto, context: { invokeContext: IInvoke }): Promise<CommandModel>`",
  "Updates an existing setting.": "既存の設定を更新します。",
  "`deleteSetting(key: DetailKey, context: { invokeContext: IInvoke }): Promise<CommandModel>`": "`deleteSetting(key: DetailKey, context: { invokeContext: IInvoke }): Promise<CommandModel>`",
  "Deletes a specific setting based on the provided key.": "指定されたキーに基づいて特定の設定を削除します。",
  "MasterDataService": "マスターデータサービス",
  "The MasterDataService service provides methods to manage master data and operations. This includes listing, retrieving, creating, updating, and deleting data, as well as checking for the existence of specific codes.": "MasterDataService サービスは、マスターデータと操作を管理するためのメソッドを提供します。これには、リスト、取得、作成、更新、削除、および特定のコードの存在確認が含まれます。",
  "`list( searchDto: MasterDataSearchDto): Promise<MasterDataListEntity>`": "`list( searchDto: MasterDataSearchDto): Promise<MasterDataListEntity>`",
  "Lists master data based on the provided search criteria.": "指定された検索条件に基づいてマスターデータをリストします。",
  "`get(key: DetailDto): Promise<MasterDataEntity>`": "`get(key: DetailDto): Promise<MasterDataEntity>`",
  "Get a master data by pk and sk.": "主キー (pk) およびソートキー (sk) によるマスターデータの取得。",
  "`create(data: CreateMasterDataDto, context: { invokeContext: IInvoke })`": "`create(data: CreateMasterDataDto, context: { invokeContext: IInvoke })`",
  "Creates a new master data entity": "新しいマスターデータエンティティを作成します。",
  "`update(key: DetailDto, updateDto: UpdateDataSettingDto, context: { invokeContext: IInvoke })`": "`update(key: DetailDto, updateDto: UpdateDataSettingDto, context: { invokeContext: IInvoke })`",
  "Updates existing master data.": "既存のマスターデータを更新します。",
  "`delete(key: DetailDto, opts: { invokeContext: IInvoke })`": "`delete(key: DetailDto, opts: { invokeContext: IInvoke })`",
  "Deletes specific master data based on the provided key.": "指定されたキーに基づいて特定のマスターデータを削除します。",
  "`checkExistCode(tenantCode: string, type: string, code: string)`": "`checkExistCode(tenantCode: string, type: string, code: string)`",
  "Checks if a specific code exists within the given tenant and type.": "指定されたテナントとタイプ内で特定のコードが存在するかどうかを確認します。"
}
