{
  "Sequence setup and usage.": "",
  "Sequence": "",
  "Purpose": "このサービスの目的は、システム内で動的なシーケンスを管理することです。",
  "`SequenceModule`  is a service for managing dynamic sequences in the system using DynamoDB as the primary database.": "`SequenceModule` は、DynamoDB を主要なデータベースとして使用してシステム内で動的なシーケンスを管理するためのサービスです。",
  "This service is designed to:": "このサービスは次の目的で設計されています:",
  "Generate unique sequence numbers based on parameters such as sequence type, tenant, or date.": "シーケンスタイプ、テナント、日付などのパラメータに基づいて一意なシーケンス番号を生成します。",
  "Automatically reset sequences based on cycles like:": "次のようなサイクルに基づいてシーケンスを自動的にリセットします:",
  "Daily.": "毎日。",
  "Monthly.": "毎月。",
  "Yearly.": "毎年。",
  "Fiscal Yearly.": "会計年度単位。",
  "Format sequence numbers according to specific system requirements (e.g., TODO-PERSONAL-72-001).": "システムの特定の要件に従ってシーケンス番号をフォーマットします（例: TODO-PERSONAL-72-001）。",
  "Ensure data consistency and integrity in multi-tenant systems.": "マルチテナントシステムでのデータの整合性と完全性を確保します。",
  "Usage": "使用方法",
  "The solution for customizing the behavior of the `SequenceModule` is to pass it an options `object` in the static `register()` method. The options object is only contain one property:": "`SequenceModule` の動作をカスタマイズする解決策は、静的な `register()` メソッドでオプションの `object` を渡すことです。オプションオブジェクトには、1 つのプロパティのみが含まれています。",
  "`enableController`: enable or disable default sequence controller.": "`enableController`: デフォルトのシーケンスコントローラーを有効または無効にします。",
  "We will create a simple example demonstrating how to use the sequence module and customize authentication for the sequence controller.": "シーケンスモジュールの使用方法とシーケンスコントローラーの認証をカスタマイズする方法を示す簡単な例を作成します。",
  "Beside controller, we can directly use `SequenceService` to generating sequence by injecting service.": "コントローラーのほかに、`SequenceService` を直接使用してサービスを注入することでシーケンスを生成できます。",
  "The `SequenceService` have three public methods:": "",
  "*async* `generateSequenceItem( dto: GenerateFormattedSequenceDto, options: {invokeContext:IInvoke}):  Promise<SequenceEntity>`": "",
  "Generates a new sequence based on the parameters provided in the GenerateFormattedSequenceDto object.": "",
  "Parameters": "パラメータ",
  "`dto: GenerateFormattedSequenceDto`": "",
  "The data transfer object that customizes the behavior of the sequence generation. Its properties include:": "シーケンス生成の動作をカスタマイズするデータ転送オブジェクトです。そのプロパティには以下が含まれます:",
  "`date?: Date`": "",
  "Default: Current date.": "デフォルト: 現在の日付。",
  "Description: Specifies the date for which the sequence is generated.": "説明: シーケンスが生成される日付を指定します。",
  "`rotateBy?: RotateByEnum`": "`rotateBy?: RotateByEnum`",
  "Default: none.": "デフォルト: なし。",
  "Options": "オプション",
  "fiscal_yearly": "",
  "yearly": "",
  "monthly": "",
  "daily": "",
  "none": "",
  "Description: Determines the rotation type for the sequence.": "説明: シーケンスの回転タイプを決定します。",
  "`tenantCode: string`": "`tenantCode: string`",
  "Required: Yes.": "必須: はい。",
  "Description: Identifies the tenant and type code for the intended usage.": "説明: テナントと用途のタイプコードを識別します。",
  "`typeCode: string`": "",
  "`params?: SequenceParamsDto`": "",
  "Required: No.": "",
  "Description: Defines parameters to identify the sequence.": "説明: シーケンスを識別するためのパラメータを定義します。",
  "Response": "",
  "The return value of this function  has type of `SequenceEntity` as follows:": "この関数の戻り値は次のような `SequenceEntity` 型になります。",
  "Customizable": "カスタマイズ方法",
  "By default, the returned data includes the formattedNo field with the format `%%no%%`, where `no` represents the sequence number. If you want to define your own custom format, you can update the master data in DynamoDB with the following parameters:": "デフォルトでは、返されるデータには、「%%no%%」形式の formattedNo フィールドが含まれます。「no」はシーケンス番号を表します。独自のカスタム形式を定義したい場合は、次のパラメータを使用して DynamoDB のマスター データを更新できます。",
  "`MASTER${KEY_SEPARATOR}${tenantCode}`": "",
  "`MASTER_SETTING${KEY_SEPARATOR}${typeCode}`": "",
  "Example": "例",
  "For example, if you want to add `code1` to `code5`,  `month`, `day `, `date`, `no` as well as `fiscal_year`, into your format, the format would look like this:": "たとえば、「code1」から「code5」、「month」、「day」、「date」、「no」、および「fiscal_year」をフォーマットに追加する場合、フォーマットは次のようになります。",
  "In this format": "このフォーマットでは",
  "Variables are written inside `%% <param> %%.`": "変数は `%% <param> %%` 内に記述されます。",
  "After the #, the length of the variable is specified, indicating the desired length of the field when the formatted sequence number is returned.": "`#` の後に変数の長さを指定し、フォーマットされたシーケンス番号が返されるときに必要なフィールドの長さを示します。",
  "For instance": "例えば",
  "`%%code2#:0>7%%` ensures code2 is formatted to be 7 characters long, padding with leading zeros if necessary.": "`%%code2#:0>7%%` は、code2 が 7 文字の長さにフォーマットされ、必要に応じて先頭にゼロが埋め込まれます。",
  "`%%fiscal_year#:0>2%% `formats fiscal_year to a length of 2 characters.": "`%%fiscal_year#:0>2%% `は、fiscal_year を 2 文字の長さにフォーマットします。",
  "`%%code3%%` represents the code3 value as it is.": "`%%code3%%` は code3 の値をそのまま表します。",
  "`%%no#:0>3%%` ensures the sequence number (no) is formatted to be 3 digits long, padded with leading zeros if necessary.": "`%%no#:0>3%%` は、シーケンス番号 (no) が 3 桁の長さにフォーマットされ、必要に応じて先頭にゼロが埋め込まれることを保証します。",
  "If you want to calculate the fiscal_year starting from any specific month, you can add the `startMonth` field. For example, if you want the fiscal year to start from March, the format would look like this:": "特定の月から始まる会計年度を計算したい場合は、「startMonth」フィールドを追加できます。たとえば、会計年度を 3 月から開始する場合、形式は次のようになります。",
  "In this case": "この場合",
  "startMonth: Defines the month to start the fiscal year (e.g., 3 for March).": "startMonth: 会計年度を開始する月を定義します (例: 3 月の場合は 3)。",
  "If you want to calculate the fiscal year starting from a specific date (e.x 2005-01-01), you can add the `registerDate` field, like this:": "特定の日付 (例: 2005-01-01) から始まる会計年度を計算したい場合は、次のように `registerDate` フィールドを追加できます。",
  "registerDate: Defines the exact start date of the fiscal year (e.g., \"2005-01-01\").": "registerDate: 会計年度の正確な開始日を定義します (例: \"2005-01-01\")。",
  "This allows you to customize the fiscal year calculation according to your specific business needs.": "これにより、特定のビジネス ニーズに応じて会計年度の計算をカスタマイズできます。",
  "*async* `getCurrentSequence(key: DetailKey): Promise<DataEntity>` <span class=\"badge badge--warning\">deprecated</span>": "*async* `getCurrentSequence(key: DetailKey): Promise<DataEntity>` <span class=\"badge badge--warning\">非推奨</span>",
  "Deprecated, for removal: This API element is subject to removal in a future version.": "非推奨、削除予定: この API 要素は将来のバージョンで削除される可能性があります",
  "*async* `genNewSequence( dto: GenSequenceDto, options: {invokeContext: IInvoke}): Promise<DataEntity>` <span class=\"badge badge--warning\">deprecated</span>": "*async* `genNewSequence( dto: GenSequenceDto, options: {invokeContext: IInvoke}): Promise<DataEntity>` <span class=\"badge badge--warning\">非推奨</span>",
  "Deprecated, for removal: This API element is subject to removal in a future version. Use [`generateSequenceItem` method](#async-generatesequenceitem-dto-generateformattedsequencedto-options-invokecontextiinvoke--promisesequenceentity) instead.": "非推奨、削除予定: この API 要素は将来のバージョンで削除される可能性があります。代わりに [`generateSequenceItem` メソッド](#async-generatesequenceitem-dto-generateformattedsequencedto-options-invokecontextiinvoke--promisesequenceentity) を使用してください"
}