{
  "Versioning Rules": "バージョン管理ルール",
  "The MBC CQRS Serverless Framework implements optimistic locking using version numbers to ensure data consistency in distributed systems. This guide explains the versioning rules and provides examples of their implementation.": "MBC CQRS サーバーレスフレームワークは、分散システムでのデータ整合性を確保するために、バージョン番号を使用した楽観的ロックを実装しています。このガイドでは、バージョン管理ルールとその実装例について説明します。",
  "Basic Rules": "基本ルール",
  "1. Sequential Versioning for Same PK/SK": "1. 同一PK/SKの順次バージョン管理",
  "Items with the same pk/sk combination must have versions set sequentially starting from 1": "同じpk/skの組み合わせを持つアイテムは、バージョン1から順番に設定する必要があります。",
  "Each update increments the version number by 1": "更新ごとにバージョン番号が1ずつインクリメントされます。",
  "Only the first request with a given version will succeed": "特定のバージョンでは最初のリクエストのみが成功します。",
  "Subsequent requests with the same version will fail with a conflict error": "同じバージョンの後続のリクエストは競合エラーで失敗します。",
  "2. Independent Version Sequences": "2. 独立したバージョンシーケンス",
  "Different pk/sk combinations each start their own version sequence from 1": "異なるpk/skの組み合わせは、それぞれバージョン1から独自のシーケンスを開始します。",
  "Version sequences are managed independently for each pk/sk combination": "バージョンシーケンスは各pk/skの組み合わせで独立して管理されます。",
  "This allows parallel operations on different items without version conflicts": "これにより、異なるアイテムへの並行操作がバージョン競合なく実行可能です。",
  "3. Optimistic Locking": "3. 楽観的ロック",
  "Used to prevent concurrent updates to the same item": "同一アイテムへの同時更新を防ぐために使用されます。",
  "Version number is automatically incremented with each update": "バージョン番号は更新ごとに自動的にインクリメントされます。",
  "Throws ConditionalCheckFailedException on version conflicts": "バージョン競合時にConditionalCheckFailedExceptionをスローします。",
  "Ensures data consistency in distributed environments": "分散環境でのデータ整合性を確保します。",
  "Implementation Examples": "実装例",
  "Basic Version Handling": "基本的なバージョン管理",
  "'Version Handling'": "'バージョンの処理'",
  "'should handle sequential versions correctly'": "",
  "Initial create with version 0": "バージョン0で初期作成",
  "Update with correct version": "正しいバージョンで更新",
  "'Updated Name'": "'バージョン管理ルール'",
  "Version Conflict Handling": "バージョン競合の処理",
  "'Version Conflicts'": "'バージョン競合'",
  "'should handle concurrent updates correctly'": "'同時更新を正しく処理する必要があります",
  "'Conflict Test'": "'競合テスト",
  "First update succeeds": "最初の更新が成功します",
  "Second update with same version fails": "同じバージョンでの2回目の更新は失敗します",
  "Conflict": "競合",
  "Independent Version Sequences": "独立したバージョンシーケンス",
  "'Independent Versioning'": "'「独立したバージョン管理」'",
  "'should maintain independent version sequences'": "'「独立したバージョンシーケンスを維持する必要があります」'",
  "'Sequence 1'": "シーケンス1",
  "'Sequence 2'": "シーケンス2",
  "Both items start at version 1": "両方のアイテムはバージョン1から開始します",
  "Update first item": "最初のアイテムを更新",
  "Second item still at version 1": "2番目のアイテムはまだバージョン1",
  "Best Practices": "ベストプラクティス",
  "1. Always include version number in update operations": "1. 更新操作には必ずバージョン番号を含める。",
  "2. Handle version conflict errors gracefully in your application": "2. アプリケーションでバージョン競合エラーを適切に処理する。",
  "3. Use appropriate retry strategies for handling conflicts": "3. 競合を処理するための適切なリトライ戦略を使用する。",
  "4. Consider implementing exponential backoff for retries": "4. リトライには指数バックオフを実装することを検討する。",
  "5. Document version handling in your API documentation": "5. APIドキュメントにバージョン管理を記載する。"
}