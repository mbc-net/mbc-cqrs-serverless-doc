{
  "Learn how to write e2e test": "e2e(エンドツーエンド)の方法を学びましょう。",
  "End-to-end test": "e2e(エンドツーエンド)テスト",
  "Unlike unit testing, which focuses on individual modules and classes, end-to-end (e2e) testing covers the interaction of classes and modules at a more aggregate level -- closer to the kind of interaction that end-users will have with the production system. As an application grows, it becomes hard to manually test the end-to-end behavior of each API endpoint. Automated end-to-end tests help us ensure that the overall behavior of the system is correct and meets project requirements.": "個々のモジュールやクラスに焦点を当てた単体テストとは異なり、エンドツーエンド (e2e) テストは、クラスとモジュールの相互作用をより集合的なレベルでカバーします。これは、エンドユーザーが本番環境と行う相互作用に近いものです。システム。アプリケーションが成長するにつれて、各 API エンドポイントのエンドツーエンドの動作を手動でテストすることが困難になります。自動化されたエンドツーエンド テストは、システムの全体的な動作が正しく、プロジェクトの要件を満たしていることを確認するのに役立ちます。",
  "e2e testing tests the API in a real environment, so there’s no need to mock any services. To summarize, there are five main steps for writing an e2e test:": "e2e(エンドツーエンド) テストでは実際の環境で API をテストするため、サービスをモックする必要はありません。要約すると、e2e(エンドツーエンド) テストを作成するには 5 つの主な手順があります。",
  "Create necessary data.": "必要なデータを作成します。",
  "Make API calls using the Supertest library to simulate HTTP requests.": "Supertest ライブラリを使用して API 呼び出しを行い、HTTP リクエストをシミュレートします。",
  "Check data is correct or not": "データが正しいかどうかを確認してください",
  "Clean data": "データをクリアする",
  "Here is the scaffolds default e2e tests for applications:": "これはアプリケーションのスキャフォールドのデフォルトの e2e(エンドツーエンド) テストです",
  "GitHub Actions Setup": "",
  "To automate E2E testing in your CI/CD pipeline, you'll need to set up GitHub Actions. Here's a comprehensive guide on configuring GitHub Actions for E2E testing:": "",
  "Runner Configuration": "",
  "Your workflow needs to be configured with appropriate runner settings based on your environment. For MBC-NET repositories, the runner configuration must be specified exactly as:": "",
  "Important notes": "",
  "Case sensitivity is critical: 'ARM64' must be uppercase": "",
  "'linux' must be lowercase": "",
  "All three labels are required": "",
  "The order of labels matters": "",
  "When using self-hosted runners, ensure proper configuration of labels and permissions based on your environment setup.": "",
  "Environment Setup": "",
  "The workflow requires several services and configurations:": "",
  "Docker Services": "",
  "Directory Permissions": "",
  "Docker Container Health Checks": "",
  "Docker コンテナのヘルスチェックは、コンテナの状態を監視するために重要です。ヘルスチェックの設定には、以下の2つのコンテキストを考慮する必要があります：": "",
  "Docker コンテナ内部からのヘルスチェック": "",
  "GitHub Actions ワークフローからのヘルスチェック": "",
  "注意": "",
  "Docker コンテナ内部では、サービス名（例：dynamodb-local）を使用してサービスにアクセスします": "",
  "GitHub Actions のワークフローステップでは localhost を使用します（ポートフォワーディングにより）": "",
  "より堅牢なヘルスチェックのために、単純な接続チェック（nc コマンド）ではなく、実際の API コールを使用することを推奨します": "",
  "ネットワークの問題が発生した場合は、以下を確認してください：": "",
  "Docker Compose のネットワーク設定": "",
  "ポートマッピングの設定": "",
  "コンテナ間の名前解決": "",
  "GitHub Actions ランナーの環境変数": "",
  "Service Configuration": "",
  "Each service should be configured with:": "",
  "Proper user permissions in Dockerfile": "",
  "Volume management": "",
  "Health check mechanisms": "",
  "Workflow Example": "",
  "Here's a complete example of a GitHub Actions workflow for E2E testing:": ""
}