{
  "Versioning Rules": "Versioning Rules",
  "The MBC CQRS Serverless Framework implements optimistic locking using version numbers to ensure data consistency in distributed systems. This guide explains the versioning rules and provides examples of their implementation.": "The MBC CQRS Serverless Framework implements optimistic locking using version numbers to ensure data consistency in distributed systems. This guide explains the versioning rules and provides examples of their implementation.",
  "Basic Rules": "Basic Rules",
  "1. Sequential Versioning for Same PK/SK": "1. Sequential Versioning for Same PK/SK",
  "Items with the same pk/sk combination must have versions set sequentially starting from 1": "Items with the same pk/sk combination must have versions set sequentially starting from 1",
  "Each update increments the version number by 1": "Each update increments the version number by 1",
  "Only the first request with a given version will succeed": "Only the first request with a given version will succeed",
  "Subsequent requests with the same version will fail with a conflict error": "Subsequent requests with the same version will fail with a conflict error",
  "2. Independent Version Sequences": "2. Independent Version Sequences",
  "Different pk/sk combinations each start their own version sequence from 1": "Different pk/sk combinations each start their own version sequence from 1",
  "Version sequences are managed independently for each pk/sk combination": "Version sequences are managed independently for each pk/sk combination",
  "This allows parallel operations on different items without version conflicts": "This allows parallel operations on different items without version conflicts",
  "3. Optimistic Locking": "3. Optimistic Locking",
  "Used to prevent concurrent updates to the same item": "Used to prevent concurrent updates to the same item",
  "Version number is automatically incremented with each update": "Version number is automatically incremented with each update",
  "Throws ConditionalCheckFailedException on version conflicts": "Throws ConditionalCheckFailedException on version conflicts",
  "Ensures data consistency in distributed environments": "Ensures data consistency in distributed environments",
  "Implementation Examples": "Implementation Examples",
  "Basic Version Handling": "Basic Version Handling",
  "'Version Handling'": "'Version Handling'",
  "'should handle sequential versions correctly'": "'should handle sequential versions correctly'",
  "Initial create with version 0": "Initial create with version 0",
  "Update with correct version": "Update with correct version",
  "'Updated Name'": "'Updated Name'",
  "Version Conflict Handling": "Version Conflict Handling",
  "'Version Conflicts'": "'Version Conflicts'",
  "'should handle concurrent updates correctly'": "'should handle concurrent updates correctly'",
  "'Conflict Test'": "'Conflict Test'",
  "First update succeeds": "First update succeeds",
  "Second update with same version fails": "Second update with same version fails",
  "Conflict": "Conflict",
  "Independent Version Sequences": "Independent Version Sequences",
  "'Independent Versioning'": "'Independent Versioning'",
  "'should maintain independent version sequences'": "'should maintain independent version sequences'",
  "'Sequence 1'": "'Sequence 1'",
  "'Sequence 2'": "'Sequence 2'",
  "Both items start at version 1": "Both items start at version 1",
  "Update first item": "Update first item",
  "Second item still at version 1": "Second item still at version 1",
  "Best Practices": "Best Practices",
  "1. Always include version number in update operations": "1. Always include version number in update operations",
  "2. Handle version conflict errors gracefully in your application": "2. Handle version conflict errors gracefully in your application",
  "3. Use appropriate retry strategies for handling conflicts": "3. Use appropriate retry strategies for handling conflicts",
  "4. Consider implementing exponential backoff for retries": "4. Consider implementing exponential backoff for retries",
  "5. Document version handling in your API documentation": "5. Document version handling in your API documentation"
}