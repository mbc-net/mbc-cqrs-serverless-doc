{
  "Master": "Master",
  "The Master Service provides functionality for managing master data and settings in a multi-tenant environment": "The Master Service provides functionality for managing master data and settings in a multi-tenant environment",
  "Overview": "Overview",
  "The Master Service consists of two main components:": "The Master Service consists of two main components:",
  "Implements hierarchical settings management": "Implements hierarchical settings management",
  "Supports creation of settings at all levels": "Supports creation of settings at all levels",
  "Provides update and delete operations for tenant settings": "Provides update and delete operations for tenant settings",
  "Implements cascading settings retrieval": "Implements cascading settings retrieval",
  "Master Data Service": "Master Data Service",
  "Implements CRUD operations for master data entities": "Implements CRUD operations for master data entities",
  "Provides list and retrieval functionality": "Provides list and retrieval functionality",
  "Includes code validation capabilities": "Includes code validation capabilities",
  "Ensures data integrity across tenant boundaries": "Ensures data integrity across tenant boundaries",
  "Installation": "Installation",
  "Basic Usage": "Basic Usage",
  "The solution for customizing the behavior of the `MasterModule` is to pass it an options `object` in the static `register()` method. The options object is only contain one property:": "The solution for customizing the behavior of the `MasterModule` is to pass it an options `object` in the static `register()` method. The options object is only contain one property:",
  "`enableController`: enable or disable default master controller.": "`enableController`: enable or disable default master controller.",
  "API Reference": "API Reference",
  "MasterSettingService": "MasterSettingService",
  "The MasterSettingService interface manages settings at various levels user, group, tenant, common. It allows retrieving, updating, creating, and deleting settings.": "The MasterSettingService interface manages settings at various levels user, group, tenant, common. It allows retrieving, updating, creating, and deleting settings.",
  "`getSetting(dto: GetSettingDto, context: { invokeContext: IInvoke }): Promise<MasterSettingEntity>`": "`getSetting(dto: GetSettingDto, context: { invokeContext: IInvoke }): Promise<MasterSettingEntity>`",
  "Retrieves a specific setting based on the provided setting code.": "Retrieves a specific setting based on the provided setting code.",
  "`createCommonTenantSetting(dto: CommonSettingDto, context: { invokeContext: IInvoke }): Promise<CommandModel>`": "`createCommonTenantSetting(dto: CommonSettingDto, context: { invokeContext: IInvoke }): Promise<CommandModel>`",
  "Creates a common tenant setting that is shared across the system.": "Creates a common tenant setting that is shared across the system.",
  "`createTenantSetting(dto: TenantSettingDto, context: { invokeContext: IInvoke }): Promise<CommandModel>`": "`createTenantSetting(dto: TenantSettingDto, context: { invokeContext: IInvoke }): Promise<CommandModel>`",
  "Creates a tenant-specific setting.": "Creates a tenant-specific setting.",
  "`createGroupSetting(dto: GroupSettingDto, context: { invokeContext: IInvoke }): Promise<CommandModel>`": "`createGroupSetting(dto: GroupSettingDto, context: { invokeContext: IInvoke }): Promise<CommandModel>`",
  "Creates a group-specific setting within a tenant.": "Creates a group-specific setting within a tenant.",
  "`createUserSetting(dto: UserSettingDto, context: { invokeContext: IInvoke }): Promise<CommandModel>`": "`createUserSetting(dto: UserSettingDto, context: { invokeContext: IInvoke }): Promise<CommandModel>`",
  "Creates a user-specific setting within a tenant.": "Creates a user-specific setting within a tenant.",
  "`updateSetting(params: DetailKey, dto: UpdateSettingDto, context: { invokeContext: IInvoke }): Promise<CommandModel>`": "`updateSetting(params: DetailKey, dto: UpdateSettingDto, context: { invokeContext: IInvoke }): Promise<CommandModel>`",
  "Updates an existing setting.": "Updates an existing setting.",
  "`deleteSetting(key: DetailKey, context: { invokeContext: IInvoke }): Promise<CommandModel>`": "`deleteSetting(key: DetailKey, context: { invokeContext: IInvoke }): Promise<CommandModel>`",
  "Deletes a specific setting based on the provided key.": "Deletes a specific setting based on the provided key.",
  "MasterDataService": "MasterDataService",
  "The MasterDataService service provides methods to manage master data and operations. This includes listing, retrieving, creating, updating, and deleting data, as well as checking for the existence of specific codes.": "The MasterDataService service provides methods to manage master data and operations. This includes listing, retrieving, creating, updating, and deleting data, as well as checking for the existence of specific codes.",
  "`list( searchDto: MasterDataSearchDto): Promise<MasterDataListEntity>`": "`list( searchDto: MasterDataSearchDto): Promise<MasterDataListEntity>`",
  "Lists master data based on the provided search criteria.": "Lists master data based on the provided search criteria.",
  "`get(key: DetailDto): Promise<MasterDataEntity>`": "`get(key: DetailDto): Promise<MasterDataEntity>`",
  "Get a master data by pk and sk.": "Get a master data by pk and sk.",
  "`create(data: CreateMasterDataDto, context: { invokeContext: IInvoke })`": "`create(data: CreateMasterDataDto, context: { invokeContext: IInvoke })`",
  "Creates a new master data entity": "Creates a new master data entity",
  "`update(key: DetailDto, updateDto: UpdateDataSettingDto, context: { invokeContext: IInvoke })`": "`update(key: DetailDto, updateDto: UpdateDataSettingDto, context: { invokeContext: IInvoke })`",
  "Updates existing master data.": "Updates existing master data.",
  "`delete(key: DetailDto, opts: { invokeContext: IInvoke })`": "`delete(key: DetailDto, opts: { invokeContext: IInvoke })`",
  "Deletes specific master data based on the provided key.": "Deletes specific master data based on the provided key.",
  "`checkExistCode(tenantCode: string, type: string, code: string)`": "`checkExistCode(tenantCode: string, type: string, code: string)`",
  "Checks if a specific code exists within the given tenant and type.": "Checks if a specific code exists within the given tenant and type."
}