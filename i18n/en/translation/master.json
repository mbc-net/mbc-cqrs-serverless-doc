{
  "Master related recipes.": "Master related recipes.",
  "Master": "Master",
  "Purpose": "Purpose",
  "The **Master** package provides two primary services to manage different aspects of master-related data and settings:": "The **Master** package provides two primary services to manage different aspects of master-related data and settings:",
  "**MasterDataService**: Responsible for managing data within the master.": "**MasterDataService**: Responsible for managing data within the master.",
  "**MasterSettingService**: Responsible for managing the settings of the master.": "**MasterSettingService**: Responsible for managing the settings of the master.",
  "Usage": "Usage",
  "The solution for customizing the behavior of the `MasterModule` is to pass it an options `object` in the static `register()` method. The options object is only contain one property:": "The solution for customizing the behavior of the `MasterModule` is to pass it an options `object` in the static `register()` method. The options object is only contain one property:",
  "`enableController`: enable or disable default master controller.": "`enableController`: enable or disable default master controller.",
  "MasterSettingService": "MasterSettingService",
  "The MasterSettingService interface manages settings at various levels (user, group, tenant, common). It allows retrieving, updating, creating, and deleting settings.": "The MasterSettingService interface manages settings at various levels (user, group, tenant, common). It allows retrieving, updating, creating, and deleting settings.",
  "`getSetting(dto: GetSettingDto, context: { invokeContext: IInvoke }): Promise<MasterSettingEntity>`": "`getSetting(dto: GetSettingDto, context: { invokeContext: IInvoke }): Promise<MasterSettingEntity>`",
  "Descriptions": "Descriptions",
  "Retrieves a specific setting based on the provided setting code.": "Retrieves a specific setting based on the provided setting code.",
  "Parameters": "Parameters",
  "`dto`: GetSettingDto": "`dto`: GetSettingDto",
  "`code`: string": "`code`: string",
  "`createCommonTenantSetting(dto: CommonSettingDto, context: { invokeContext: IInvoke }): Promise<CommandModel>`": "`createCommonTenantSetting(dto: CommonSettingDto, context: { invokeContext: IInvoke }): Promise<CommandModel>`",
  "Creates a common tenant setting that is shared across the system.": "Creates a common tenant setting that is shared across the system.",
  "`dto`: CommonSettingDto": "`dto`: CommonSettingDto",
  "`name`: string": "`name`: string",
  "`settingValue`: object": "`settingValue`: object",
  "`createTenantSetting(dto: TenantSettingDto, context: { invokeContext: IInvoke }): Promise<CommandModel>`": "`createTenantSetting(dto: TenantSettingDto, context: { invokeContext: IInvoke }): Promise<CommandModel>`",
  "Creates a tenant-specific setting.": "Creates a tenant-specific setting.",
  "`dto`: TenantSettingDto": "`dto`: TenantSettingDto",
  "`tenantCode`: string": "`tenantCode`: string",
  "`createGroupSetting(dto: GroupSettingDto, context: { invokeContext: IInvoke }): Promise<CommandModel>`": "`createGroupSetting(dto: GroupSettingDto, context: { invokeContext: IInvoke }): Promise<CommandModel>`",
  "Creates a group-specific setting within a tenant.": "Creates a group-specific setting within a tenant.",
  "`groupId`: string": "`groupId`: string",
  "`createUserSetting(dto: UserSettingDto, context: { invokeContext: IInvoke }): Promise<CommandModel>`": "`createUserSetting(dto: UserSettingDto, context: { invokeContext: IInvoke }): Promise<CommandModel>`",
  "Creates a user-specific setting within a tenant.": "Creates a user-specific setting within a tenant.",
  "`userId`: string": "`userId`: string",
  "`updateSetting(params: DetailKey, dto: UpdateSettingDto, context: { invokeContext: IInvoke }): Promise<CommandModel>`": "`updateSetting(params: DetailKey, dto: UpdateSettingDto, context: { invokeContext: IInvoke }): Promise<CommandModel>`",
  "Updates an existing setting.": "Updates an existing setting.",
  "`key`: DetailKey": "`key`: DetailKey",
  "`pk`: string": "`pk`: string",
  "`sk`: string": "`sk`: string",
  "`dto`: UpdateSettingDto": "`dto`: UpdateSettingDto",
  "`deleteSetting(key: DetailKey, context: { invokeContext: IInvoke }): Promise<CommandModel>`": "`deleteSetting(key: DetailKey, context: { invokeContext: IInvoke }): Promise<CommandModel>`",
  "Deletes a specific setting based on the provided key.": "Deletes a specific setting based on the provided key.",
  "MasterDataService": "MasterDataService",
  "The MasterDataService service provides methods to manage master data and operations. This includes listing, retrieving, creating, updating, and deleting data, as well as checking for the existence of specific codes.": "The MasterDataService service provides methods to manage master data and operations. This includes listing, retrieving, creating, updating, and deleting data, as well as checking for the existence of specific codes.",
  "`list( searchDto: MasterDataSearchDto): Promise<MasterDataListEntity>`": "`list( searchDto: MasterDataSearchDto): Promise<MasterDataListEntity>`",
  "Lists master data based on the provided search criteria.": "Lists master data based on the provided search criteria.",
  "`searchDto`: `MasterDataSearchDto`": "`searchDto`: `MasterDataSearchDto`",
  "`tenantCode?`: `string`": "`tenantCode?`: `string`",
  "`settingCode`: `string`": "`settingCode`: `string`",
  "`get(key: DetailDto): Promise<MasterDataEntity>`": "`get(key: DetailDto): Promise<MasterDataEntity>`",
  "Retrieves specific master data based on the provided key.": "Retrieves specific master data based on the provided key.",
  "`key`: `DetailDto`": "`key`: `DetailDto`",
  "`pk`: `string`": "`pk`: `string`",
  "`sk`: `string`": "`sk`: `string`",
  "`create(createDto: CreateMasterDataDto, context: { invokeContext: IInvoke })`": "`create(createDto: CreateMasterDataDto, context: { invokeContext: IInvoke })`",
  "Creates new master data.": "Creates new master data.",
  "`createDto`:`CreateMasterDataDto`": "`createDto`:`CreateMasterDataDto`",
  "`tenantCode`:`string`": "`tenantCode`:`string`",
  "`name`: `string`": "`name`: `string`",
  "`code`: `string`": "`code`: `string`",
  "`attributes`?: `object`": "`attributes`?: `object`",
  "`update(key: DetailDto, updateDto: UpdateDataSettingDto, context: { invokeContext: IInvoke })`": "`update(key: DetailDto, updateDto: UpdateDataSettingDto, context: { invokeContext: IInvoke })`",
  "Updates existing master data.": "Updates existing master data.",
  "`delete(key: DetailDto, opts: { invokeContext: IInvoke })`": "`delete(key: DetailDto, opts: { invokeContext: IInvoke })`",
  "Deletes specific master data based on the provided key.": "Deletes specific master data based on the provided key.",
  "`checkExistCode(tenantCode: string, type: string, code: string)`": "`checkExistCode(tenantCode: string, type: string, code: string)`",
  "Checks if a specific code exists within the given tenant and type.": "Checks if a specific code exists within the given tenant and type.",
  "`type`:`string`": "`type`:`string`",
  "`code`:`string`": "`code`:`string`"
}