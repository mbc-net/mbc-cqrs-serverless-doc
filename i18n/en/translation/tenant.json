{
  "Learn about the Tenant Service for managing tenant-level operations in a multi-tenant serverless CQRS architecture.": "Learn about the Tenant Service for managing tenant-level operations in a multi-tenant serverless CQRS architecture.",
  "Tenant": "Tenant",
  "The Tenant Service provides functionality for managing tenant-level operations in a multi-tenant serverless CQRS architecture": "The Tenant Service provides functionality for managing tenant-level operations in a multi-tenant serverless CQRS architecture",
  "Overview": "Overview",
  "The Tenant Service is designed to": "The Tenant Service is designed to",
  "Manage tenant-level entity operations": "Manage tenant-level entity operations",
  "Implement CRUD operations for tenant entities": "Implement CRUD operations for tenant entities",
  "Ensure proper isolation between different tenants": "Ensure proper isolation between different tenants",
  "Validate tenant codes and maintain tenant integrity": "Validate tenant codes and maintain tenant integrity",
  "Installation": "Installation",
  "Basic Usage": "Basic Usage",
  "API Reference": "API Reference",
  "`getTenant(key: DetailKey): Promise<DataModel>`": "`getTenant(key: DetailKey): Promise<DataModel>`",
  "Retrieves tenant details based on the given key.": "Retrieves tenant details based on the given key.",
  "`createCommonTenant(dto: CommonTenantCreateDto, context: { invokeContext: IInvoke }):Promise<CommandModel>`": "`createCommonTenant(dto: CommonTenantCreateDto, context: { invokeContext: IInvoke }):Promise<CommandModel>`",
  "Creates a common tenant that is shared across the entire system.": "Creates a common tenant that is shared across the entire system.",
  "` createTenant(dto: TenantCreateDto,context: { invokeContext: IInvoke },): Promise<CommandModel>`": "` createTenant(dto: TenantCreateDto,context: { invokeContext: IInvoke },): Promise<CommandModel>`",
  "Creates a tenant for an individual entity.": "Creates a tenant for an individual entity.",
  "` updateTenant(key: DetailKey,dto: TenantUpdateDto,context: { invokeContext: IInvoke }): Promise<CommandModel>`": "` updateTenant(key: DetailKey,dto: TenantUpdateDto,context: { invokeContext: IInvoke }): Promise<CommandModel>`",
  "Updates an existing tenant's details.": "Updates an existing tenant's details.",
  "`deleteTenant(key: DetailKey,context: { invokeContext: IInvoke }): Promise<CommandModel>`": "`deleteTenant(key: DetailKey,context: { invokeContext: IInvoke }): Promise<CommandModel>`",
  "Deletes a tenant based on the provided key": "Deletes a tenant based on the provided key",
  "`addTenantGroup(dto: TenantGroupAddDto,context: { invokeContext: IInvoke }): Promise<CommandModel>`": "`addTenantGroup(dto: TenantGroupAddDto,context: { invokeContext: IInvoke }): Promise<CommandModel>`",
  "Adds a group to a specific tenant.": "Adds a group to a specific tenant.",
  "`customizeSettingGroups(dto: TenantGroupUpdateDto,context: { invokeContext: IInvoke }): Promise<CommandModel>`": "`customizeSettingGroups(dto: TenantGroupUpdateDto,context: { invokeContext: IInvoke }): Promise<CommandModel>`",
  "Customizes the settings of groups associated with a tenant.": "Customizes the settings of groups associated with a tenant."
}