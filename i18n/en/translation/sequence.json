{
  "Sequence setup and usage.": "Sequence setup and usage.",
  "Sequence": "Sequence",
  "Purpose": "Purpose",
  "`SequenceModule`  is a service for managing dynamic sequences in the system using DynamoDB as the primary database.": "`SequenceModule`  is a service for managing dynamic sequences in the system using DynamoDB as the primary database.",
  "This service is designed to:": "This service is designed to:",
  "Generate unique sequence numbers based on parameters such as sequence type, tenant, or date.": "Generate unique sequence numbers based on parameters such as sequence type, tenant, or date.",
  "Automatically reset sequences based on cycles like:": "Automatically reset sequences based on cycles like:",
  "Daily.": "Daily.",
  "Monthly.": "Monthly.",
  "Yearly.": "Yearly.",
  "Fiscal Yearly.": "Fiscal Yearly.",
  "Format sequence numbers according to specific system requirements (e.g., TODO-PERSONAL-72-001).": "Format sequence numbers according to specific system requirements (e.g., TODO-PERSONAL-72-001).",
  "Ensure data consistency and integrity in multi-tenant systems.": "Ensure data consistency and integrity in multi-tenant systems.",
  "Usage": "Usage",
  "The solution for customizing the behavior of the `SequenceModule` is to pass it an options `object` in the static `register()` method. The options object is only contain one property:": "The solution for customizing the behavior of the `SequenceModule` is to pass it an options `object` in the static `register()` method. The options object is only contain one property:",
  "`enableController`: enable or disable default sequence controller.": "`enableController`: enable or disable default sequence controller.",
  "We will create a simple example demonstrating how to use the sequence module and customize authentication for the sequence controller.": "We will create a simple example demonstrating how to use the sequence module and customize authentication for the sequence controller.",
  "Beside controller, we can directly use `SequenceService` to generating sequence by injecting service.": "Beside controller, we can directly use `SequenceService` to generating sequence by injecting service.",
  "The `SequenceService` have three public methods:": "The `SequenceService` have three public methods:",
  "*async* `generateSequenceItem( dto: GenerateFormattedSequenceDto, options?: {invokeContext:IInvoke}):  Promise<SequenceEntity>`": "*async* `generateSequenceItem( dto: GenerateFormattedSequenceDto, options?: {invokeContext:IInvoke}):  Promise<SequenceEntity>`",
  "Generates a new sequence based on the parameters provided in the GenerateFormattedSequenceDto object.": "Generates a new sequence based on the parameters provided in the GenerateFormattedSequenceDto object.",
  "Parameters": "Parameters",
  "`dto: GenerateFormattedSequenceDto`": "`dto: GenerateFormattedSequenceDto`",
  "The data transfer object that customizes the behavior of the sequence generation. Its properties include:": "The data transfer object that customizes the behavior of the sequence generation. Its properties include:",
  "`date?: Date`": "`date?: Date`",
  "Default: Current date.": "Default: Current date.",
  "Description: Specifies the date for which the sequence is generated.": "Description: Specifies the date for which the sequence is generated.",
  "`rotateBy?: RotateByEnum`": "`rotateBy?: RotateByEnum`",
  "Default: none.": "Default: none.",
  "Options": "Options",
  "fiscal_yearly": "fiscal_yearly",
  "yearly": "yearly",
  "monthly": "monthly",
  "daily": "daily",
  "none": "none",
  "Description: Determines the rotation type for the sequence.": "Description: Determines the rotation type for the sequence.",
  "`tenantCode: string`": "`tenantCode: string`",
  "Required: Yes.": "Required: Yes.",
  "Description: Identifies the tenant and type code for the intended usage.": "Description: Identifies the tenant and type code for the intended usage.",
  "`typeCode: string`": "`typeCode: string`",
  "`params: SequenceParamsDto`": "`params: SequenceParamsDto`",
  "Description: Defines parameters to identify the sequence.": "Description: Defines parameters to identify the sequence.",
  "Response": "Response",
  "The return value of this function  has type of `SequenceEntity` as follows:": "The return value of this function  has type of `SequenceEntity` as follows:",
  "Customizable": "Customizable",
  "By default, the returned data includes the formattedNo field with the format `%%no%%`, where `no` represents the sequence number. If you want to define your own custom format, you can update the master data in DynamoDB with the following parameters:": "By default, the returned data includes the formattedNo field with the format `%%no%%`, where `no` represents the sequence number. If you want to define your own custom format, you can update the master data in DynamoDB with the following parameters:",
  "`MASTER${KEY_SEPARATOR}${tenantCode}`": "`MASTER${KEY_SEPARATOR}${tenantCode}`",
  "` SEQ${KEY_SEPARATOR}${typeCode}`": "` SEQ${KEY_SEPARATOR}${typeCode}`",
  "Example": "Example",
  "For example, if you want to add `code1` to `code5`,  `month`, `day `, `date`, `no` as well as `fiscal_year`, into your format, the format would look like this:": "For example, if you want to add `code1` to `code5`,  `month`, `day `, `date`, `no` as well as `fiscal_year`, into your format, the format would look like this:",
  "In this format": "In this format",
  "Variables are written inside `%% <param> %%.`": "Variables are written inside `%% <param> %%.`",
  "After the #, the length of the variable is specified, indicating the desired length of the field when the formatted sequence number is returned.": "After the #, the length of the variable is specified, indicating the desired length of the field when the formatted sequence number is returned.",
  "For instance": "For instance",
  "`%%code2#:0>7%%` ensures code2 is formatted to be 7 characters long, padding with leading zeros if necessary.": "`%%code2#:0>7%%` ensures code2 is formatted to be 7 characters long, padding with leading zeros if necessary.",
  "`%%fiscal_year#:0>2%% `formats fiscal_year to a length of 2 characters.": "`%%fiscal_year#:0>2%% `formats fiscal_year to a length of 2 characters.",
  "`%%code3%%` represents the code3 value as it is.": "`%%code3%%` represents the code3 value as it is.",
  "`%%no#:0>3%%` ensures the sequence number (no) is formatted to be 3 digits long, padded with leading zeros if necessary.": "`%%no#:0>3%%` ensures the sequence number (no) is formatted to be 3 digits long, padded with leading zeros if necessary.",
  "If you want to calculate the fiscal_year starting from any specific month, you can add the startMonth field. For example, if you want the fiscal year to start from July, the format would look like this:": "If you want to calculate the fiscal_year starting from any specific month, you can add the startMonth field. For example, if you want the fiscal year to start from July, the format would look like this:",
  "In this case": "In this case",
  "startMonth: Defines the month to start the fiscal year (e.g., 7 for July).": "startMonth: Defines the month to start the fiscal year (e.g., 7 for July).",
  "If you want to calculate the fiscal year starting from a specific date, you can add the registerDate field, like this:": "If you want to calculate the fiscal year starting from a specific date, you can add the registerDate field, like this:",
  "registerDate: Defines the exact start date of the fiscal year (e.g., \"2010-01-01\").": "registerDate: Defines the exact start date of the fiscal year (e.g., \"2010-01-01\").",
  "This allows you to customize the fiscal year calculation according to your specific business needs.": "This allows you to customize the fiscal year calculation according to your specific business needs.",
  "*async* `getCurrentSequence(key: DetailKey): Promise<DataEntity>` <span class=\"badge badge--warning\">deprecated</span>": "*async* `getCurrentSequence(key: DetailKey): Promise<DataEntity>` <span class=\"badge badge--warning\">deprecated</span>",
  "Deprecated, for removal: This API element is subject to removal in a future version.": "Deprecated, for removal: This API element is subject to removal in a future version.",
  "*async* `genNewSequence( dto: GenSequenceDto, options: {invokeContext: IInvoke}): Promise<DataEntity>` <span class=\"badge badge--warning\">deprecated</span>": "*async* `genNewSequence( dto: GenSequenceDto, options: {invokeContext: IInvoke}): Promise<DataEntity>` <span class=\"badge badge--warning\">deprecated</span>",
  "Deprecated, for removal: This API element is subject to removal in a future version. Use [`generateSequenceItem` method](#async-generatesequenceitem-dto-generateformattedsequencedto-options-invokecontextiinvoke--promisesequenceentity) instead.": "Deprecated, for removal: This API element is subject to removal in a future version. Use [`generateSequenceItem` method](#async-generatesequenceitem-dto-generateformattedsequencedto-options-invokecontextiinvoke--promisesequenceentity) instead."
}