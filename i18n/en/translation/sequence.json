{
  "Sequence setup and usage.": "Sequence setup and usage.",
  "Sequence": "Sequence",
  "Purpose": "Purpose",
  "`SequenceModule`  is a service for managing dynamic sequences in the system using DynamoDB as the primary database.": "`SequenceModule`  is a service for managing dynamic sequences in the system using DynamoDB as the primary database.",
  "This service is designed to:": "This service is designed to:",
  "Generate unique sequence numbers based on parameters such as sequence type, tenant, or date.": "Generate unique sequence numbers based on parameters such as sequence type, tenant, or date.",
  "Automatically reset sequences based on cycles like:": "Automatically reset sequences based on cycles like:",
  "Daily.": "Daily.",
  "Monthly.": "Monthly.",
  "Yearly.": "Yearly.",
  "Fiscal Yearly.": "Fiscal Yearly.",
  "Format sequence numbers according to specific system requirements (e.g., TODO-PERSONAL-72-001).": "Format sequence numbers according to specific system requirements (e.g., TODO-PERSONAL-72-001).",
  "Ensure data consistency and integrity in multi-tenant systems.": "Ensure data consistency and integrity in multi-tenant systems.",
  "Usage": "Usage",
  "The solution for customizing the behavior of the `SequenceModule` is to pass it an options `object` in the static `register()` method. The options object is only contain one property:": "The solution for customizing the behavior of the `SequenceModule` is to pass it an options `object` in the static `register()` method. The options object is only contain one property:",
  "`enableController`: enable or disable default sequence controller.": "`enableController`: enable or disable default sequence controller.",
  "We will create a simple example demonstrating how to use the sequence module and customize authentication for the sequence controller.": "We will create a simple example demonstrating how to use the sequence module and customize authentication for the sequence controller.",
  "Beside controller, we can directly use `SequenceService` to generating sequence by injecting service.": "Beside controller, we can directly use `SequenceService` to generating sequence by injecting service.",
  "The `SequenceService` have only one public method:": "The `SequenceService` have only one public method:",
  "Generates a new sequence based on the parameters provided in the GenSequenceDto object.": "Generates a new sequence based on the parameters provided in the GenSequenceDto object.",
  "Parameters": "Parameters",
  "`dto: GenSequenceDto`": "`dto: GenSequenceDto`",
  "The data transfer object that customizes the behavior of the sequence generation. Its properties include:": "The data transfer object that customizes the behavior of the sequence generation. Its properties include:",
  "`date?: Date`": "`date?: Date`",
  "Default: Current date.": "Default: Current date.",
  "Description: Specifies the date for which the sequence is generated.": "Description: Specifies the date for which the sequence is generated.",
  "`rotateBy?: RotateByEnum`": "`rotateBy?: RotateByEnum`",
  "Default: none.": "Default: none.",
  "Options": "Options",
  "fiscal_yearly": "fiscal_yearly",
  "yearly": "yearly",
  "monthly": "monthly",
  "daily": "daily",
  "none": "none",
  "Description: Determines the rotation type for the sequence.": "Description: Determines the rotation type for the sequence.",
  "`tenantCode: string`": "`tenantCode: string`",
  "Required: Yes.": "Required: Yes.",
  "Description: Identifies the tenant and type code for the intended usage.": "Description: Identifies the tenant and type code for the intended usage.",
  "`params: SequenceParamsDto`": "`params: SequenceParamsDto`",
  "Description: Defines parameters to identify the sequence.": "Description: Defines parameters to identify the sequence.",
  "`format?: string`": "`format?: string`",
  "Default: %%no%%.": "Default: %%no%%.",
  "Description: Specifies a custom format for the sequence. Example format:": "Description: Specifies a custom format for the sequence. Example format:",
  "`startMonth?: number`": "`startMonth?: number`",
  "Default: 4 (April).": "Default: 4 (April).",
  "Description: Specifies the starting month of the fiscal year.": "Description: Specifies the starting month of the fiscal year.",
  "`registerDate?: Date`": "`registerDate?: Date`",
  "Default: Not specified.": "Default: Not specified.",
  "Description: Calculates the fiscal period based on the provided date.": "Description: Calculates the fiscal period based on the provided date."
}