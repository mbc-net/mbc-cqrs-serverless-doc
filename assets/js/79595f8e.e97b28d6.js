"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[201],{5094:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>l,frontMatter:()=>s,metadata:()=>r,toc:()=>i});var o=t(4848),a=t(8453);const s={description:"Learn how to use CommandService."},c="CommandService",r={id:"command-service",title:"CommandService",description:"Learn how to use CommandService.",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/command-service.md",sourceDirName:".",slug:"/command-service",permalink:"/mbc-cqrs-serverless-doc/docs/command-service",draft:!1,unlisted:!1,editUrl:"https://github.com/mbc-net/mbc-cqrs-serverless-doc/edit/master/docs/command-service.md",tags:[],version:"current",frontMatter:{description:"Learn how to use CommandService."},sidebar:"tutorialSidebar",previous:{title:"CommandModule",permalink:"/mbc-cqrs-serverless-doc/docs/command-module"},next:{title:"DataService",permalink:"/mbc-cqrs-serverless-doc/docs/data-service"}},d={},i=[{value:"Description",id:"description",level:2},{value:"Methods",id:"methods",level:2},{value:"<em>async</em> <code>publish(input: CommandInputModel, opts: ICommandOptions)</code>",id:"async-publishinput-commandinputmodel-opts-icommandoptions",level:3},{value:"<em>async</em> <code>publishPartialUpdate( input: CommandPartialInputModel, opts?: ICommandOptions)</code>",id:"async-publishpartialupdate-input-commandpartialinputmodel-opts-icommandoptions",level:3},{value:"async reSyncData()",id:"async-resyncdata",level:3}];function m(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"commandservice",children:"CommandService"})}),"\n",(0,o.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,o.jsx)(n.p,{children:"The methods of this service are primarily used to manipulate the command table."}),"\n",(0,o.jsxs)(n.p,{children:["In the example for the method below, assume you import the ",(0,o.jsx)(n.code,{children:"CommandModule"})," into your module as follows:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:'import { CommandModule } from "@mbc-cqrs-severless/core";\nimport { Module } from "@nestjs/common";\n\nimport { CatDataSyncRdsHandler } from "./handler/cat-rds.handler";\nimport { CatController } from "./cat.controller";\nimport { CatService } from "./cat.service";\n\n@Module({\n  imports: [\n    CommandModule.register({\n      tableName: "cat",\n      dataSyncHandlers: [CatDataSyncRdsHandler],\n    }),\n  ],\n  controllers: [CatController],\n  providers: [CatService],\n})\nexport class CatModule {}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Then, the ",(0,o.jsx)(n.code,{children:"CommandService"})," and ",(0,o.jsx)(n.code,{children:"DataService"})," will be ready for injection into other services for your use."]}),"\n",(0,o.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,o.jsxs)(n.h3,{id:"async-publishinput-commandinputmodel-opts-icommandoptions",children:[(0,o.jsx)(n.em,{children:"async"})," ",(0,o.jsx)(n.code,{children:"publish(input: CommandInputModel, opts: ICommandOptions)"})]}),"\n",(0,o.jsxs)(n.p,{children:["Utilize this method to publish a full command, as it will insert the data directly into the ",(0,o.jsx)(n.strong,{children:"command"})," table."]}),"\n",(0,o.jsx)(n.p,{children:"For example, you can publish a new cat command as bellow:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:'import {\n  generateId,\n  getCommandSource,\n  VERSION_FIRST,\n} from "@mbc-cqrs-severless/core";\n\n// ...\n\nconst catCommand = new CatCommandDto({\n  pk: catPk,\n  sk: catSk,\n  tenantCode,\n  id: generateId(catPk, catSk),\n  code,\n  type: "CAT",\n  name: attributes.name,\n  version: VERSION_FIRST,\n  attributes,\n});\n\nconst commandSource = getCommandSource(\n  basename(__dirname),\n  this.constructor.name,\n  "createCatCommand"\n);\n\nconst item = await this.commandService.publish(catCommand, {\n  source: commandSource,\n  invokeContext,\n});\n'})}),"\n",(0,o.jsx)(n.p,{children:"The method returns the command data."}),"\n",(0,o.jsxs)(n.h3,{id:"async-publishpartialupdate-input-commandpartialinputmodel-opts-icommandoptions",children:[(0,o.jsx)(n.em,{children:"async"})," ",(0,o.jsx)(n.code,{children:"publishPartialUpdate( input: CommandPartialInputModel, opts?: ICommandOptions)"})]}),"\n",(0,o.jsx)(n.p,{children:"This method allows you to create new command data based on the previous command."}),"\n",(0,o.jsx)(n.p,{children:"For example, you want to update cat's name:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"import {\n  generateId,\n  getCommandSource,\n  VERSION_FIRST,\n} from '@mbc-cqrs-severless/core'\n\n// ...\n\n  const catCommand = new CatCommandDto({\n    pk: catPk,\n    sk: catSk,\n    tenantCode,\n    id: generateId(catPk, catSk),\n    code,\n    type: 'CAT',\n    name: attributes.name,\n    version: VERSION_FIRST,\n    attributes,\n  })\n  \n  const commandSource = getCommandSource(\n    basename(__dirname),\n    this.constructor.name,\n    'createCatCommand',\n  )\n  \n  const item = await this.commandService.publish(catCommand,{\n    source: commandSource,\n    invokeContext,\n  })\n"})}),"\n",(0,o.jsx)(n.p,{children:"The method returns the command data."}),"\n",(0,o.jsx)(n.h3,{id:"async-resyncdata",children:"async reSyncData()"}),"\n",(0,o.jsx)(n.p,{children:"If you want to reapply the data sync handler, this method is designed for you to use. You only need to call the function as follows:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"await this.commandService.reSyncData();\n"})})]})}function l(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(m,{...e})}):m(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>r});var o=t(6540);const a={},s=o.createContext(a);function c(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:c(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);