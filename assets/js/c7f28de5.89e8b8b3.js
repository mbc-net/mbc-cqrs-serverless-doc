"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[283],{9200:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>o,default:()=>m,frontMatter:()=>s,metadata:()=>c,toc:()=>d});var a=t(4848),r=t(8453);const s={description:"Learn how to create and register data sync handler."},o="Data sync event",c={id:"data-sync-event",title:"Data sync event",description:"Learn how to create and register data sync handler.",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/data-sync-event.md",sourceDirName:".",slug:"/data-sync-event",permalink:"/mbc-cqrs-serverless/docs/data-sync-event",draft:!1,unlisted:!1,editUrl:"https://github.com/mbc-net/mbc-cqrs-serverless-doc/docs/data-sync-event.md",tags:[],version:"current",frontMatter:{description:"Learn how to create and register data sync handler."},sidebar:"tutorialSidebar",previous:{title:"Custom event",permalink:"/mbc-cqrs-serverless/docs/custom-event"},next:{title:"Configuring",permalink:"/mbc-cqrs-serverless/docs/configuring"}},i={},d=[];function l(e){const n={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"data-sync-event",children:"Data sync event"})}),"\n",(0,a.jsx)(n.p,{children:"The data sync event is a particularly significant custom event because it is one of the most commonly registered events within the application. Handlers for this event play a crucial role in ensuring data consistency and synchronization between different databases. For example, a handler might be responsible for syncing data from DynamoDB to RDS, sending registration emails, and executing other related tasks that maintain the integrity and flow of data across the application."}),"\n",(0,a.jsx)(n.p,{children:"To make working with the data sync event easier, we've created several helper utilities that are ready for you to use. By using these pre-built utilities, you can streamline your development process, reduce the amount of custom code needed, and ensure that your event handlers are efficient and reliable."}),"\n",(0,a.jsxs)(n.p,{children:["By convention, you create a class that implements ",(0,a.jsx)(n.code,{children:"IDataSyncHandler"})," and then override the up and down methods as below example:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:'import { CommandModel, IDataSyncHandler } from "@mbc-cqrs-severless/core";\nimport { Injectable, Logger } from "@nestjs/common";\nimport { PrismaService } from "src/prisma";\n\n@Injectable()\nexport class CatDataSyncRdsHandler implements IDataSyncHandler {\n  private readonly logger = new Logger(CatDataSyncRdsHandler.name);\n\n  constructor(private readonly prismaService: PrismaService) {}\n\n  async up(cmd: CommandModel): Promise<any> {\n    this.logger.debug(cmd);\n    // sync data\n  }\n\n  async down(cmd: CommandModel): Promise<any> {\n    this.logger.debug(cmd);\n  }\n}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Then, you register this handler to ",(0,a.jsx)(n.code,{children:"CommandModule"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"@Module({\n  imports: [\n    CommandModule.register({\n      tableName: 'cat',\n      dataSyncHandlers: [CatDataSyncRdsHandler],\n    }),\n  ],\n  ...\n})\nexport class CatModule {}\n"})})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>c});var a=t(6540);const r={},s=a.createContext(r);function o(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);