"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[987],{2081:(e,s,o)=>{o.r(s),o.d(s,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var t=o(4848),n=o(8453);const r={description:"Configure module path aliases that allow you to remap certain import paths."},a="Absolute Imports and Module Path Aliases",i={id:"absolute_imports_and_module_path_aliases",title:"Absolute Imports and Module Path Aliases",description:"Configure module path aliases that allow you to remap certain import paths.",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/absolute_imports_and_module_path_aliases.md",sourceDirName:".",slug:"/absolute_imports_and_module_path_aliases",permalink:"/mbc-cqrs-serverless-doc/docs/absolute_imports_and_module_path_aliases",draft:!1,unlisted:!1,editUrl:"https://github.com/mbc-net/mbc-cqrs-serverless-doc/docs/absolute_imports_and_module_path_aliases.md",tags:[],version:"current",frontMatter:{description:"Configure module path aliases that allow you to remap certain import paths."},sidebar:"tutorialSidebar",previous:{title:"Environment Variables",permalink:"/mbc-cqrs-serverless-doc/docs/environment-variables"},next:{title:"Testing",permalink:"/mbc-cqrs-serverless-doc/docs/testing"}},l={},c=[{value:"Absolute Imports",id:"absolute-imports",level:2},{value:"Module Aliases",id:"module-aliases",level:2}];function d(e){const s={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.header,{children:(0,t.jsx)(s.h1,{id:"absolute-imports-and-module-path-aliases",children:"Absolute Imports and Module Path Aliases"})}),"\n",(0,t.jsxs)(s.p,{children:["MBC CQRS serverless framework has in-built support for the ",(0,t.jsx)(s.code,{children:'"paths"'})," and ",(0,t.jsx)(s.code,{children:'"baseUrl"'})," options of ",(0,t.jsx)(s.code,{children:"tsconfig.json"})," file."]}),"\n",(0,t.jsx)(s.p,{children:"These options allow you to alias project directories to absolute paths, making it easier to import modules. For example:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ts",children:'// before\nimport { Role } from "../../../auth/role.enum";\n\n// after\nimport { Role } from "@/auth/role.enum";\n'})}),"\n",(0,t.jsx)(s.h2,{id:"absolute-imports",children:"Absolute Imports"}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"baseUrl"})," configuration option allows you to import directly from the root of the project."]}),"\n",(0,t.jsx)(s.p,{children:"An example of this configuration:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-json",children:'# tsconfig.json\nTODO:\n{\n  "compilerOptions": {\n    "baseUrl": "."\n  },\n  "include": ["src/*", "src/**/*"]\n}\n'})}),"\n",(0,t.jsx)(s.h2,{id:"module-aliases",children:"Module Aliases"}),"\n",(0,t.jsxs)(s.p,{children:["In addition to configuring the ",(0,t.jsx)(s.code,{children:"baseUrl"}),' path, you can use the "paths" option to "alias" module paths.']}),"\n",(0,t.jsxs)(s.p,{children:["For example, the following configuration maps ",(0,t.jsx)(s.code,{children:"@/auth/*"})," to ",(0,t.jsx)(s.code,{children:"auth/*"}),":"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-json",children:'# tsconfig.json\n TODO:\n{\n  "compilerOptions": {\n    "baseUrl": ".",\n    "paths": {\n      "@/auth/*": ["auth/*"]\n    }\n  },\n  "include": ["src/*", "src/**/*"]\n}\n'})})]})}function u(e={}){const{wrapper:s}={...(0,n.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,s,o)=>{o.d(s,{R:()=>a,x:()=>i});var t=o(6540);const n={},r=t.createContext(n);function a(e){const s=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:a(e.components),t.createElement(r.Provider,{value:s},e.children)}}}]);