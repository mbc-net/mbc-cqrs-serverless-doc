"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[675],{8688:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>d,default:()=>h,frontMatter:()=>i,metadata:()=>c,toc:()=>o});var s=r(4848),n=r(8453);const i={description:"Project structure"},d="Project structure",c={id:"project-structure",title:"Project structure",description:"Project structure",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/project-structure.md",sourceDirName:".",slug:"/project-structure",permalink:"/mbc-cqrs-serverless/docs/project-structure",draft:!1,unlisted:!1,editUrl:"https://github.com/mbc-net/mbc-cqrs-serverless-doc/docs/project-structure.md",tags:[],version:"current",frontMatter:{description:"Project structure"},sidebar:"tutorialSidebar",previous:{title:"Installation",permalink:"/mbc-cqrs-serverless/docs/installation"},next:{title:"Building your application",permalink:"/mbc-cqrs-serverless/docs/build-your-application"}},l={},o=[{value:"MBC CQRS serverless Project Structure",id:"mbc-cqrs-serverless-project-structure",level:2},{value:"Top-level folders",id:"top-level-folders",level:3},{value:"Top-level files",id:"top-level-files",level:3},{value:"Application module conventions",id:"application-module-conventions",level:2}];function a(e){const t={h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,n.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"project-structure",children:"Project structure"})}),"\n",(0,s.jsx)(t.h2,{id:"mbc-cqrs-serverless-project-structure",children:"MBC CQRS serverless Project Structure"}),"\n",(0,s.jsx)(t.p,{children:"This page provides an overview of the project structure of a mbc-cqrs-serverless application. It covers top-level files and folders, configuration files."}),"\n",(0,s.jsx)(t.h3,{id:"top-level-folders",children:"Top-level folders"}),"\n",(0,s.jsx)(t.p,{children:"Top-level folders are used to organize your application's code, infrastructure for local development, data migration, and testing."}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{}),(0,s.jsx)(t.th,{})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"infra-local"}),(0,s.jsx)(t.td,{children:"Infrastructure runs in a local environment"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"prisma"}),(0,s.jsx)(t.td,{children:"Configuration for your Prisma ORM and dynamoDB table"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"src"}),(0,s.jsx)(t.td,{children:"Application source folder"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"test"}),(0,s.jsx)(t.td,{children:"Configuration for e2e Jest testing and manual API tests"})]})]})]}),"\n",(0,s.jsx)(t.h3,{id:"top-level-files",children:"Top-level files"}),"\n",(0,s.jsx)(t.p,{children:"Top-level files are used to configure your application, manage dependencies, and define environment variables."}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{}),(0,s.jsx)(t.th,{})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:".env"}),(0,s.jsx)(t.td,{children:"Environment variables"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:".env.local"}),(0,s.jsx)(t.td,{children:"Local environment variables"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:".eslintrc.js"}),(0,s.jsx)(t.td,{children:"Configuration file for ESLint"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:".gitignore"}),(0,s.jsx)(t.td,{children:"Specifies files and directories that Git should ignore"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:".prettierrc"}),(0,s.jsx)(t.td,{children:"Configure Prettier's code formatting rules"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"jest.config.js"}),(0,s.jsx)(t.td,{children:"Configuration for Jest testing"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"nest-cli.json"}),(0,s.jsx)(t.td,{children:"Nest.js plugins configuration"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"package-lock.json"}),(0,s.jsx)(t.td,{children:"Lockfile that holds information on the dependencies installed"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"package.json"}),(0,s.jsx)(t.td,{children:"Project dependencies and scripts"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"README.md"}),(0,s.jsx)(t.td,{children:"Information about a project, including its description, installation instruction, and usage guidelines"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"tsconfig.build.json"}),(0,s.jsx)(t.td,{children:"Configuration TypeScript compiler options"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"tsconfig.json"}),(0,s.jsx)(t.td,{children:"Configuration file for TypeScript"})]})]})]}),"\n",(0,s.jsx)(t.h2,{id:"application-module-conventions",children:"Application module conventions"}),"\n",(0,s.jsx)(t.p,{children:"The following file conventions are used to define new module in src folder."}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{}),(0,s.jsx)(t.th,{children:"folder"}),(0,s.jsx)(t.th,{})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"dto"}),(0,s.jsx)(t.td,{children:"folder"}),(0,s.jsx)(t.td,{children:"Define the DTO (Data Transfer Object) schema. A DTO is an object that defines how the data will be sent over the network."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"entities"}),(0,s.jsx)(t.td,{children:"folder"}),(0,s.jsx)(t.td,{children:"Define the business object."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"handler"}),(0,s.jsx)(t.td,{children:"folder"}),(0,s.jsx)(t.td,{children:"Define the data sync handler classes."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"[name].service.ts"}),(0,s.jsx)(t.td,{children:"file"}),(0,s.jsx)(t.td,{children:"Define business logics."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"[name].controller.ts"}),(0,s.jsx)(t.td,{children:"file"}),(0,s.jsx)(t.td,{children:"Define a controller."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"[name].module.ts"}),(0,s.jsx)(t.td,{children:"file"}),(0,s.jsx)(t.td,{children:"Organizes code relevant for a specific feature, keeping code organized and establishing clear boundaries."})]})]})]})]})}function h(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},8453:(e,t,r)=>{r.d(t,{R:()=>d,x:()=>c});var s=r(6540);const n={},i=s.createContext(n);function d(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:d(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);